Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> init
Rule 1     init -> MAIN DOSPUNTOS instrucciones
Rule 2     instrucciones -> instruccion instrucciones2
Rule 3     instrucciones2 -> instruccion instrucciones2
Rule 4     instrucciones2 -> empty
Rule 5     instruccion -> asignacion
Rule 6     instruccion -> array_instr
Rule 7     instruccion -> unset_instr
Rule 8     instruccion -> print_instr
Rule 9     instruccion -> if_instr
Rule 10    instruccion -> etiqueta_instr
Rule 11    instruccion -> goto_instr
Rule 12    instruccion -> exit_instr
Rule 13    instruccion -> error PTCOMA
Rule 14    instruccion -> error DOSPUNTOS
Rule 15    asignacion -> VAR IGUAL exp_numerica PTCOMA
Rule 16    asignacion -> VAR IGUAL READ PARIZQ PARDER PTCOMA
Rule 17    asignacion -> VAR IGUAL BAND VAR PTCOMA
Rule 18    array_instr -> VAR indices IGUAL exp_numerica PTCOMA
Rule 19    print_instr -> PRINT PARIZQ exp_numerica PARDER PTCOMA
Rule 20    unset_instr -> UNSET PARIZQ exp_numerica PARDER PTCOMA
Rule 21    if_instr -> IF PARIZQ exp_numerica PARDER goto_instr
Rule 22    etiqueta_instr -> ID DOSPUNTOS
Rule 23    goto_instr -> GOTO ID PTCOMA
Rule 24    exit_instr -> EXIT PTCOMA
Rule 25    exp_numerica -> valores exp_numerica2
Rule 26    exp_numerica -> BNOT valores
Rule 27    exp_numerica -> MENOS valores
Rule 28    exp_numerica -> NOT valores
Rule 29    exp_numerica -> ARRAY PARIZQ PARDER
Rule 30    exp_numerica -> ABS PARIZQ valores PARDER
Rule 31    exp_numerica -> PARIZQ tipo_dato PARDER VAR
Rule 32    exp_numerica2 -> signo valores
Rule 33    exp_numerica2 -> empty
Rule 34    indices -> indice indices2
Rule 35    indices2 -> indice indices2
Rule 36    indices2 -> empty
Rule 37    indice -> CORIZQ exp_numerica CORDER
Rule 38    valores -> ENTERO
Rule 39    valores -> DECIMAL
Rule 40    valores -> VAR
Rule 41    valores -> VAR indices
Rule 42    valores -> CADENA
Rule 43    signo -> MAS
Rule 44    signo -> MENOS
Rule 45    signo -> POR
Rule 46    signo -> DIVIDIDO
Rule 47    signo -> RESIDUO
Rule 48    signo -> AND
Rule 49    signo -> OR
Rule 50    signo -> XOR
Rule 51    signo -> BAND
Rule 52    signo -> BOR
Rule 53    signo -> BXOR
Rule 54    signo -> SHIFTI
Rule 55    signo -> SHIFTD
Rule 56    signo -> IGUALQ
Rule 57    signo -> NIGUALQ
Rule 58    signo -> MAYORQ
Rule 59    signo -> MENORQ
Rule 60    signo -> MAYORIGUALQ
Rule 61    signo -> MENORIGUALQ
Rule 62    tipo_dato -> INT
Rule 63    tipo_dato -> FLOAT
Rule 64    tipo_dato -> CHAR
Rule 65    empty -> <empty>

Terminals, with rules where they appear

ABS                  : 30
AND                  : 48
ARRAY                : 29
BAND                 : 17 51
BNOT                 : 26
BOR                  : 52
BXOR                 : 53
CADENA               : 42
CHAR                 : 64
CORDER               : 37
CORIZQ               : 37
DECIMAL              : 39
DIVIDIDO             : 46
DOSPUNTOS            : 1 14 22
ENTERO               : 38
EXIT                 : 24
FLOAT                : 63
GOTO                 : 23
ID                   : 22 23
IF                   : 21
IGUAL                : 15 16 17 18
IGUALQ               : 56
INT                  : 62
MAIN                 : 1
MAS                  : 43
MAYORIGUALQ          : 60
MAYORQ               : 58
MENORIGUALQ          : 61
MENORQ               : 59
MENOS                : 27 44
NIGUALQ              : 57
NOT                  : 28
OR                   : 49
PARDER               : 16 19 20 21 29 30 31
PARIZQ               : 16 19 20 21 29 30 31
POR                  : 45
PRINT                : 19
PTCOMA               : 13 15 16 17 18 19 20 23 24
READ                 : 16
RESIDUO              : 47
SHIFTD               : 55
SHIFTI               : 54
UNSET                : 20
VAR                  : 15 16 17 17 18 31 40 41
XOR                  : 50
error                : 13 14

Nonterminals, with rules where they appear

array_instr          : 6
asignacion           : 5
empty                : 4 33 36
etiqueta_instr       : 10
exit_instr           : 12
exp_numerica         : 15 18 19 20 21 37
exp_numerica2        : 25
goto_instr           : 11 21
if_instr             : 9
indice               : 34 35
indices              : 18 41
indices2             : 34 35
init                 : 0
instruccion          : 2 3
instrucciones        : 1
instrucciones2       : 2 3
print_instr          : 8
signo                : 32
tipo_dato            : 31
unset_instr          : 7
valores              : 25 26 27 28 30 32

Parsing method: LALR

state 0

    (0) S' -> . init
    (1) init -> . MAIN DOSPUNTOS instrucciones

    MAIN            shift and go to state 2

    init                           shift and go to state 1

state 1

    (0) S' -> init .



state 2

    (1) init -> MAIN . DOSPUNTOS instrucciones

    DOSPUNTOS       shift and go to state 3


state 3

    (1) init -> MAIN DOSPUNTOS . instrucciones
    (2) instrucciones -> . instruccion instrucciones2
    (5) instruccion -> . asignacion
    (6) instruccion -> . array_instr
    (7) instruccion -> . unset_instr
    (8) instruccion -> . print_instr
    (9) instruccion -> . if_instr
    (10) instruccion -> . etiqueta_instr
    (11) instruccion -> . goto_instr
    (12) instruccion -> . exit_instr
    (13) instruccion -> . error PTCOMA
    (14) instruccion -> . error DOSPUNTOS
    (15) asignacion -> . VAR IGUAL exp_numerica PTCOMA
    (16) asignacion -> . VAR IGUAL READ PARIZQ PARDER PTCOMA
    (17) asignacion -> . VAR IGUAL BAND VAR PTCOMA
    (18) array_instr -> . VAR indices IGUAL exp_numerica PTCOMA
    (20) unset_instr -> . UNSET PARIZQ exp_numerica PARDER PTCOMA
    (19) print_instr -> . PRINT PARIZQ exp_numerica PARDER PTCOMA
    (21) if_instr -> . IF PARIZQ exp_numerica PARDER goto_instr
    (22) etiqueta_instr -> . ID DOSPUNTOS
    (23) goto_instr -> . GOTO ID PTCOMA
    (24) exit_instr -> . EXIT PTCOMA

    error           shift and go to state 14
    VAR             shift and go to state 15
    UNSET           shift and go to state 16
    PRINT           shift and go to state 17
    IF              shift and go to state 18
    ID              shift and go to state 19
    GOTO            shift and go to state 20
    EXIT            shift and go to state 21

    instrucciones                  shift and go to state 4
    instruccion                    shift and go to state 5
    asignacion                     shift and go to state 6
    array_instr                    shift and go to state 7
    unset_instr                    shift and go to state 8
    print_instr                    shift and go to state 9
    if_instr                       shift and go to state 10
    etiqueta_instr                 shift and go to state 11
    goto_instr                     shift and go to state 12
    exit_instr                     shift and go to state 13

state 4

    (1) init -> MAIN DOSPUNTOS instrucciones .

    $end            reduce using rule 1 (init -> MAIN DOSPUNTOS instrucciones .)


state 5

    (2) instrucciones -> instruccion . instrucciones2
    (3) instrucciones2 -> . instruccion instrucciones2
    (4) instrucciones2 -> . empty
    (5) instruccion -> . asignacion
    (6) instruccion -> . array_instr
    (7) instruccion -> . unset_instr
    (8) instruccion -> . print_instr
    (9) instruccion -> . if_instr
    (10) instruccion -> . etiqueta_instr
    (11) instruccion -> . goto_instr
    (12) instruccion -> . exit_instr
    (13) instruccion -> . error PTCOMA
    (14) instruccion -> . error DOSPUNTOS
    (65) empty -> .
    (15) asignacion -> . VAR IGUAL exp_numerica PTCOMA
    (16) asignacion -> . VAR IGUAL READ PARIZQ PARDER PTCOMA
    (17) asignacion -> . VAR IGUAL BAND VAR PTCOMA
    (18) array_instr -> . VAR indices IGUAL exp_numerica PTCOMA
    (20) unset_instr -> . UNSET PARIZQ exp_numerica PARDER PTCOMA
    (19) print_instr -> . PRINT PARIZQ exp_numerica PARDER PTCOMA
    (21) if_instr -> . IF PARIZQ exp_numerica PARDER goto_instr
    (22) etiqueta_instr -> . ID DOSPUNTOS
    (23) goto_instr -> . GOTO ID PTCOMA
    (24) exit_instr -> . EXIT PTCOMA

    error           shift and go to state 14
    $end            reduce using rule 65 (empty -> .)
    VAR             shift and go to state 15
    UNSET           shift and go to state 16
    PRINT           shift and go to state 17
    IF              shift and go to state 18
    ID              shift and go to state 19
    GOTO            shift and go to state 20
    EXIT            shift and go to state 21

    instruccion                    shift and go to state 22
    instrucciones2                 shift and go to state 23
    empty                          shift and go to state 24
    asignacion                     shift and go to state 6
    array_instr                    shift and go to state 7
    unset_instr                    shift and go to state 8
    print_instr                    shift and go to state 9
    if_instr                       shift and go to state 10
    etiqueta_instr                 shift and go to state 11
    goto_instr                     shift and go to state 12
    exit_instr                     shift and go to state 13

state 6

    (5) instruccion -> asignacion .

    error           reduce using rule 5 (instruccion -> asignacion .)
    VAR             reduce using rule 5 (instruccion -> asignacion .)
    UNSET           reduce using rule 5 (instruccion -> asignacion .)
    PRINT           reduce using rule 5 (instruccion -> asignacion .)
    IF              reduce using rule 5 (instruccion -> asignacion .)
    ID              reduce using rule 5 (instruccion -> asignacion .)
    GOTO            reduce using rule 5 (instruccion -> asignacion .)
    EXIT            reduce using rule 5 (instruccion -> asignacion .)
    $end            reduce using rule 5 (instruccion -> asignacion .)


state 7

    (6) instruccion -> array_instr .

    error           reduce using rule 6 (instruccion -> array_instr .)
    VAR             reduce using rule 6 (instruccion -> array_instr .)
    UNSET           reduce using rule 6 (instruccion -> array_instr .)
    PRINT           reduce using rule 6 (instruccion -> array_instr .)
    IF              reduce using rule 6 (instruccion -> array_instr .)
    ID              reduce using rule 6 (instruccion -> array_instr .)
    GOTO            reduce using rule 6 (instruccion -> array_instr .)
    EXIT            reduce using rule 6 (instruccion -> array_instr .)
    $end            reduce using rule 6 (instruccion -> array_instr .)


state 8

    (7) instruccion -> unset_instr .

    error           reduce using rule 7 (instruccion -> unset_instr .)
    VAR             reduce using rule 7 (instruccion -> unset_instr .)
    UNSET           reduce using rule 7 (instruccion -> unset_instr .)
    PRINT           reduce using rule 7 (instruccion -> unset_instr .)
    IF              reduce using rule 7 (instruccion -> unset_instr .)
    ID              reduce using rule 7 (instruccion -> unset_instr .)
    GOTO            reduce using rule 7 (instruccion -> unset_instr .)
    EXIT            reduce using rule 7 (instruccion -> unset_instr .)
    $end            reduce using rule 7 (instruccion -> unset_instr .)


state 9

    (8) instruccion -> print_instr .

    error           reduce using rule 8 (instruccion -> print_instr .)
    VAR             reduce using rule 8 (instruccion -> print_instr .)
    UNSET           reduce using rule 8 (instruccion -> print_instr .)
    PRINT           reduce using rule 8 (instruccion -> print_instr .)
    IF              reduce using rule 8 (instruccion -> print_instr .)
    ID              reduce using rule 8 (instruccion -> print_instr .)
    GOTO            reduce using rule 8 (instruccion -> print_instr .)
    EXIT            reduce using rule 8 (instruccion -> print_instr .)
    $end            reduce using rule 8 (instruccion -> print_instr .)


state 10

    (9) instruccion -> if_instr .

    error           reduce using rule 9 (instruccion -> if_instr .)
    VAR             reduce using rule 9 (instruccion -> if_instr .)
    UNSET           reduce using rule 9 (instruccion -> if_instr .)
    PRINT           reduce using rule 9 (instruccion -> if_instr .)
    IF              reduce using rule 9 (instruccion -> if_instr .)
    ID              reduce using rule 9 (instruccion -> if_instr .)
    GOTO            reduce using rule 9 (instruccion -> if_instr .)
    EXIT            reduce using rule 9 (instruccion -> if_instr .)
    $end            reduce using rule 9 (instruccion -> if_instr .)


state 11

    (10) instruccion -> etiqueta_instr .

    error           reduce using rule 10 (instruccion -> etiqueta_instr .)
    VAR             reduce using rule 10 (instruccion -> etiqueta_instr .)
    UNSET           reduce using rule 10 (instruccion -> etiqueta_instr .)
    PRINT           reduce using rule 10 (instruccion -> etiqueta_instr .)
    IF              reduce using rule 10 (instruccion -> etiqueta_instr .)
    ID              reduce using rule 10 (instruccion -> etiqueta_instr .)
    GOTO            reduce using rule 10 (instruccion -> etiqueta_instr .)
    EXIT            reduce using rule 10 (instruccion -> etiqueta_instr .)
    $end            reduce using rule 10 (instruccion -> etiqueta_instr .)


state 12

    (11) instruccion -> goto_instr .

    error           reduce using rule 11 (instruccion -> goto_instr .)
    VAR             reduce using rule 11 (instruccion -> goto_instr .)
    UNSET           reduce using rule 11 (instruccion -> goto_instr .)
    PRINT           reduce using rule 11 (instruccion -> goto_instr .)
    IF              reduce using rule 11 (instruccion -> goto_instr .)
    ID              reduce using rule 11 (instruccion -> goto_instr .)
    GOTO            reduce using rule 11 (instruccion -> goto_instr .)
    EXIT            reduce using rule 11 (instruccion -> goto_instr .)
    $end            reduce using rule 11 (instruccion -> goto_instr .)


state 13

    (12) instruccion -> exit_instr .

    error           reduce using rule 12 (instruccion -> exit_instr .)
    VAR             reduce using rule 12 (instruccion -> exit_instr .)
    UNSET           reduce using rule 12 (instruccion -> exit_instr .)
    PRINT           reduce using rule 12 (instruccion -> exit_instr .)
    IF              reduce using rule 12 (instruccion -> exit_instr .)
    ID              reduce using rule 12 (instruccion -> exit_instr .)
    GOTO            reduce using rule 12 (instruccion -> exit_instr .)
    EXIT            reduce using rule 12 (instruccion -> exit_instr .)
    $end            reduce using rule 12 (instruccion -> exit_instr .)


state 14

    (13) instruccion -> error . PTCOMA
    (14) instruccion -> error . DOSPUNTOS

    PTCOMA          shift and go to state 25
    DOSPUNTOS       shift and go to state 26


state 15

    (15) asignacion -> VAR . IGUAL exp_numerica PTCOMA
    (16) asignacion -> VAR . IGUAL READ PARIZQ PARDER PTCOMA
    (17) asignacion -> VAR . IGUAL BAND VAR PTCOMA
    (18) array_instr -> VAR . indices IGUAL exp_numerica PTCOMA
    (34) indices -> . indice indices2
    (37) indice -> . CORIZQ exp_numerica CORDER

    IGUAL           shift and go to state 27
    CORIZQ          shift and go to state 30

    indices                        shift and go to state 28
    indice                         shift and go to state 29

state 16

    (20) unset_instr -> UNSET . PARIZQ exp_numerica PARDER PTCOMA

    PARIZQ          shift and go to state 31


state 17

    (19) print_instr -> PRINT . PARIZQ exp_numerica PARDER PTCOMA

    PARIZQ          shift and go to state 32


state 18

    (21) if_instr -> IF . PARIZQ exp_numerica PARDER goto_instr

    PARIZQ          shift and go to state 33


state 19

    (22) etiqueta_instr -> ID . DOSPUNTOS

    DOSPUNTOS       shift and go to state 34


state 20

    (23) goto_instr -> GOTO . ID PTCOMA

    ID              shift and go to state 35


state 21

    (24) exit_instr -> EXIT . PTCOMA

    PTCOMA          shift and go to state 36


state 22

    (3) instrucciones2 -> instruccion . instrucciones2
    (3) instrucciones2 -> . instruccion instrucciones2
    (4) instrucciones2 -> . empty
    (5) instruccion -> . asignacion
    (6) instruccion -> . array_instr
    (7) instruccion -> . unset_instr
    (8) instruccion -> . print_instr
    (9) instruccion -> . if_instr
    (10) instruccion -> . etiqueta_instr
    (11) instruccion -> . goto_instr
    (12) instruccion -> . exit_instr
    (13) instruccion -> . error PTCOMA
    (14) instruccion -> . error DOSPUNTOS
    (65) empty -> .
    (15) asignacion -> . VAR IGUAL exp_numerica PTCOMA
    (16) asignacion -> . VAR IGUAL READ PARIZQ PARDER PTCOMA
    (17) asignacion -> . VAR IGUAL BAND VAR PTCOMA
    (18) array_instr -> . VAR indices IGUAL exp_numerica PTCOMA
    (20) unset_instr -> . UNSET PARIZQ exp_numerica PARDER PTCOMA
    (19) print_instr -> . PRINT PARIZQ exp_numerica PARDER PTCOMA
    (21) if_instr -> . IF PARIZQ exp_numerica PARDER goto_instr
    (22) etiqueta_instr -> . ID DOSPUNTOS
    (23) goto_instr -> . GOTO ID PTCOMA
    (24) exit_instr -> . EXIT PTCOMA

    error           shift and go to state 14
    $end            reduce using rule 65 (empty -> .)
    VAR             shift and go to state 15
    UNSET           shift and go to state 16
    PRINT           shift and go to state 17
    IF              shift and go to state 18
    ID              shift and go to state 19
    GOTO            shift and go to state 20
    EXIT            shift and go to state 21

    instruccion                    shift and go to state 22
    instrucciones2                 shift and go to state 37
    empty                          shift and go to state 24
    asignacion                     shift and go to state 6
    array_instr                    shift and go to state 7
    unset_instr                    shift and go to state 8
    print_instr                    shift and go to state 9
    if_instr                       shift and go to state 10
    etiqueta_instr                 shift and go to state 11
    goto_instr                     shift and go to state 12
    exit_instr                     shift and go to state 13

state 23

    (2) instrucciones -> instruccion instrucciones2 .

    $end            reduce using rule 2 (instrucciones -> instruccion instrucciones2 .)


state 24

    (4) instrucciones2 -> empty .

    $end            reduce using rule 4 (instrucciones2 -> empty .)


state 25

    (13) instruccion -> error PTCOMA .

    error           reduce using rule 13 (instruccion -> error PTCOMA .)
    VAR             reduce using rule 13 (instruccion -> error PTCOMA .)
    UNSET           reduce using rule 13 (instruccion -> error PTCOMA .)
    PRINT           reduce using rule 13 (instruccion -> error PTCOMA .)
    IF              reduce using rule 13 (instruccion -> error PTCOMA .)
    ID              reduce using rule 13 (instruccion -> error PTCOMA .)
    GOTO            reduce using rule 13 (instruccion -> error PTCOMA .)
    EXIT            reduce using rule 13 (instruccion -> error PTCOMA .)
    $end            reduce using rule 13 (instruccion -> error PTCOMA .)


state 26

    (14) instruccion -> error DOSPUNTOS .

    error           reduce using rule 14 (instruccion -> error DOSPUNTOS .)
    VAR             reduce using rule 14 (instruccion -> error DOSPUNTOS .)
    UNSET           reduce using rule 14 (instruccion -> error DOSPUNTOS .)
    PRINT           reduce using rule 14 (instruccion -> error DOSPUNTOS .)
    IF              reduce using rule 14 (instruccion -> error DOSPUNTOS .)
    ID              reduce using rule 14 (instruccion -> error DOSPUNTOS .)
    GOTO            reduce using rule 14 (instruccion -> error DOSPUNTOS .)
    EXIT            reduce using rule 14 (instruccion -> error DOSPUNTOS .)
    $end            reduce using rule 14 (instruccion -> error DOSPUNTOS .)


state 27

    (15) asignacion -> VAR IGUAL . exp_numerica PTCOMA
    (16) asignacion -> VAR IGUAL . READ PARIZQ PARDER PTCOMA
    (17) asignacion -> VAR IGUAL . BAND VAR PTCOMA
    (25) exp_numerica -> . valores exp_numerica2
    (26) exp_numerica -> . BNOT valores
    (27) exp_numerica -> . MENOS valores
    (28) exp_numerica -> . NOT valores
    (29) exp_numerica -> . ARRAY PARIZQ PARDER
    (30) exp_numerica -> . ABS PARIZQ valores PARDER
    (31) exp_numerica -> . PARIZQ tipo_dato PARDER VAR
    (38) valores -> . ENTERO
    (39) valores -> . DECIMAL
    (40) valores -> . VAR
    (41) valores -> . VAR indices
    (42) valores -> . CADENA

    READ            shift and go to state 40
    BAND            shift and go to state 42
    BNOT            shift and go to state 44
    MENOS           shift and go to state 45
    NOT             shift and go to state 46
    ARRAY           shift and go to state 47
    ABS             shift and go to state 48
    PARIZQ          shift and go to state 41
    ENTERO          shift and go to state 49
    DECIMAL         shift and go to state 50
    VAR             shift and go to state 38
    CADENA          shift and go to state 51

    exp_numerica                   shift and go to state 39
    valores                        shift and go to state 43

state 28

    (18) array_instr -> VAR indices . IGUAL exp_numerica PTCOMA

    IGUAL           shift and go to state 52


state 29

    (34) indices -> indice . indices2
    (35) indices2 -> . indice indices2
    (36) indices2 -> . empty
    (37) indice -> . CORIZQ exp_numerica CORDER
    (65) empty -> .

    CORIZQ          shift and go to state 30
    IGUAL           reduce using rule 65 (empty -> .)
    MAS             reduce using rule 65 (empty -> .)
    MENOS           reduce using rule 65 (empty -> .)
    POR             reduce using rule 65 (empty -> .)
    DIVIDIDO        reduce using rule 65 (empty -> .)
    RESIDUO         reduce using rule 65 (empty -> .)
    AND             reduce using rule 65 (empty -> .)
    OR              reduce using rule 65 (empty -> .)
    XOR             reduce using rule 65 (empty -> .)
    BAND            reduce using rule 65 (empty -> .)
    BOR             reduce using rule 65 (empty -> .)
    BXOR            reduce using rule 65 (empty -> .)
    SHIFTI          reduce using rule 65 (empty -> .)
    SHIFTD          reduce using rule 65 (empty -> .)
    IGUALQ          reduce using rule 65 (empty -> .)
    NIGUALQ         reduce using rule 65 (empty -> .)
    MAYORQ          reduce using rule 65 (empty -> .)
    MENORQ          reduce using rule 65 (empty -> .)
    MAYORIGUALQ     reduce using rule 65 (empty -> .)
    MENORIGUALQ     reduce using rule 65 (empty -> .)
    PTCOMA          reduce using rule 65 (empty -> .)
    CORDER          reduce using rule 65 (empty -> .)
    PARDER          reduce using rule 65 (empty -> .)

    indice                         shift and go to state 53
    indices2                       shift and go to state 54
    empty                          shift and go to state 55

state 30

    (37) indice -> CORIZQ . exp_numerica CORDER
    (25) exp_numerica -> . valores exp_numerica2
    (26) exp_numerica -> . BNOT valores
    (27) exp_numerica -> . MENOS valores
    (28) exp_numerica -> . NOT valores
    (29) exp_numerica -> . ARRAY PARIZQ PARDER
    (30) exp_numerica -> . ABS PARIZQ valores PARDER
    (31) exp_numerica -> . PARIZQ tipo_dato PARDER VAR
    (38) valores -> . ENTERO
    (39) valores -> . DECIMAL
    (40) valores -> . VAR
    (41) valores -> . VAR indices
    (42) valores -> . CADENA

    BNOT            shift and go to state 44
    MENOS           shift and go to state 45
    NOT             shift and go to state 46
    ARRAY           shift and go to state 47
    ABS             shift and go to state 48
    PARIZQ          shift and go to state 41
    ENTERO          shift and go to state 49
    DECIMAL         shift and go to state 50
    VAR             shift and go to state 38
    CADENA          shift and go to state 51

    exp_numerica                   shift and go to state 56
    valores                        shift and go to state 43

state 31

    (20) unset_instr -> UNSET PARIZQ . exp_numerica PARDER PTCOMA
    (25) exp_numerica -> . valores exp_numerica2
    (26) exp_numerica -> . BNOT valores
    (27) exp_numerica -> . MENOS valores
    (28) exp_numerica -> . NOT valores
    (29) exp_numerica -> . ARRAY PARIZQ PARDER
    (30) exp_numerica -> . ABS PARIZQ valores PARDER
    (31) exp_numerica -> . PARIZQ tipo_dato PARDER VAR
    (38) valores -> . ENTERO
    (39) valores -> . DECIMAL
    (40) valores -> . VAR
    (41) valores -> . VAR indices
    (42) valores -> . CADENA

    BNOT            shift and go to state 44
    MENOS           shift and go to state 45
    NOT             shift and go to state 46
    ARRAY           shift and go to state 47
    ABS             shift and go to state 48
    PARIZQ          shift and go to state 41
    ENTERO          shift and go to state 49
    DECIMAL         shift and go to state 50
    VAR             shift and go to state 38
    CADENA          shift and go to state 51

    exp_numerica                   shift and go to state 57
    valores                        shift and go to state 43

state 32

    (19) print_instr -> PRINT PARIZQ . exp_numerica PARDER PTCOMA
    (25) exp_numerica -> . valores exp_numerica2
    (26) exp_numerica -> . BNOT valores
    (27) exp_numerica -> . MENOS valores
    (28) exp_numerica -> . NOT valores
    (29) exp_numerica -> . ARRAY PARIZQ PARDER
    (30) exp_numerica -> . ABS PARIZQ valores PARDER
    (31) exp_numerica -> . PARIZQ tipo_dato PARDER VAR
    (38) valores -> . ENTERO
    (39) valores -> . DECIMAL
    (40) valores -> . VAR
    (41) valores -> . VAR indices
    (42) valores -> . CADENA

    BNOT            shift and go to state 44
    MENOS           shift and go to state 45
    NOT             shift and go to state 46
    ARRAY           shift and go to state 47
    ABS             shift and go to state 48
    PARIZQ          shift and go to state 41
    ENTERO          shift and go to state 49
    DECIMAL         shift and go to state 50
    VAR             shift and go to state 38
    CADENA          shift and go to state 51

    exp_numerica                   shift and go to state 58
    valores                        shift and go to state 43

state 33

    (21) if_instr -> IF PARIZQ . exp_numerica PARDER goto_instr
    (25) exp_numerica -> . valores exp_numerica2
    (26) exp_numerica -> . BNOT valores
    (27) exp_numerica -> . MENOS valores
    (28) exp_numerica -> . NOT valores
    (29) exp_numerica -> . ARRAY PARIZQ PARDER
    (30) exp_numerica -> . ABS PARIZQ valores PARDER
    (31) exp_numerica -> . PARIZQ tipo_dato PARDER VAR
    (38) valores -> . ENTERO
    (39) valores -> . DECIMAL
    (40) valores -> . VAR
    (41) valores -> . VAR indices
    (42) valores -> . CADENA

    BNOT            shift and go to state 44
    MENOS           shift and go to state 45
    NOT             shift and go to state 46
    ARRAY           shift and go to state 47
    ABS             shift and go to state 48
    PARIZQ          shift and go to state 41
    ENTERO          shift and go to state 49
    DECIMAL         shift and go to state 50
    VAR             shift and go to state 38
    CADENA          shift and go to state 51

    exp_numerica                   shift and go to state 59
    valores                        shift and go to state 43

state 34

    (22) etiqueta_instr -> ID DOSPUNTOS .

    error           reduce using rule 22 (etiqueta_instr -> ID DOSPUNTOS .)
    VAR             reduce using rule 22 (etiqueta_instr -> ID DOSPUNTOS .)
    UNSET           reduce using rule 22 (etiqueta_instr -> ID DOSPUNTOS .)
    PRINT           reduce using rule 22 (etiqueta_instr -> ID DOSPUNTOS .)
    IF              reduce using rule 22 (etiqueta_instr -> ID DOSPUNTOS .)
    ID              reduce using rule 22 (etiqueta_instr -> ID DOSPUNTOS .)
    GOTO            reduce using rule 22 (etiqueta_instr -> ID DOSPUNTOS .)
    EXIT            reduce using rule 22 (etiqueta_instr -> ID DOSPUNTOS .)
    $end            reduce using rule 22 (etiqueta_instr -> ID DOSPUNTOS .)


state 35

    (23) goto_instr -> GOTO ID . PTCOMA

    PTCOMA          shift and go to state 60


state 36

    (24) exit_instr -> EXIT PTCOMA .

    error           reduce using rule 24 (exit_instr -> EXIT PTCOMA .)
    VAR             reduce using rule 24 (exit_instr -> EXIT PTCOMA .)
    UNSET           reduce using rule 24 (exit_instr -> EXIT PTCOMA .)
    PRINT           reduce using rule 24 (exit_instr -> EXIT PTCOMA .)
    IF              reduce using rule 24 (exit_instr -> EXIT PTCOMA .)
    ID              reduce using rule 24 (exit_instr -> EXIT PTCOMA .)
    GOTO            reduce using rule 24 (exit_instr -> EXIT PTCOMA .)
    EXIT            reduce using rule 24 (exit_instr -> EXIT PTCOMA .)
    $end            reduce using rule 24 (exit_instr -> EXIT PTCOMA .)


state 37

    (3) instrucciones2 -> instruccion instrucciones2 .

    $end            reduce using rule 3 (instrucciones2 -> instruccion instrucciones2 .)


state 38

    (40) valores -> VAR .
    (41) valores -> VAR . indices
    (34) indices -> . indice indices2
    (37) indice -> . CORIZQ exp_numerica CORDER

    MAS             reduce using rule 40 (valores -> VAR .)
    MENOS           reduce using rule 40 (valores -> VAR .)
    POR             reduce using rule 40 (valores -> VAR .)
    DIVIDIDO        reduce using rule 40 (valores -> VAR .)
    RESIDUO         reduce using rule 40 (valores -> VAR .)
    AND             reduce using rule 40 (valores -> VAR .)
    OR              reduce using rule 40 (valores -> VAR .)
    XOR             reduce using rule 40 (valores -> VAR .)
    BAND            reduce using rule 40 (valores -> VAR .)
    BOR             reduce using rule 40 (valores -> VAR .)
    BXOR            reduce using rule 40 (valores -> VAR .)
    SHIFTI          reduce using rule 40 (valores -> VAR .)
    SHIFTD          reduce using rule 40 (valores -> VAR .)
    IGUALQ          reduce using rule 40 (valores -> VAR .)
    NIGUALQ         reduce using rule 40 (valores -> VAR .)
    MAYORQ          reduce using rule 40 (valores -> VAR .)
    MENORQ          reduce using rule 40 (valores -> VAR .)
    MAYORIGUALQ     reduce using rule 40 (valores -> VAR .)
    MENORIGUALQ     reduce using rule 40 (valores -> VAR .)
    PTCOMA          reduce using rule 40 (valores -> VAR .)
    CORDER          reduce using rule 40 (valores -> VAR .)
    PARDER          reduce using rule 40 (valores -> VAR .)
    CORIZQ          shift and go to state 30

    indices                        shift and go to state 61
    indice                         shift and go to state 29

state 39

    (15) asignacion -> VAR IGUAL exp_numerica . PTCOMA

    PTCOMA          shift and go to state 62


state 40

    (16) asignacion -> VAR IGUAL READ . PARIZQ PARDER PTCOMA

    PARIZQ          shift and go to state 63


state 41

    (31) exp_numerica -> PARIZQ . tipo_dato PARDER VAR
    (62) tipo_dato -> . INT
    (63) tipo_dato -> . FLOAT
    (64) tipo_dato -> . CHAR

    INT             shift and go to state 65
    FLOAT           shift and go to state 66
    CHAR            shift and go to state 67

    tipo_dato                      shift and go to state 64

state 42

    (17) asignacion -> VAR IGUAL BAND . VAR PTCOMA

    VAR             shift and go to state 68


state 43

    (25) exp_numerica -> valores . exp_numerica2
    (32) exp_numerica2 -> . signo valores
    (33) exp_numerica2 -> . empty
    (43) signo -> . MAS
    (44) signo -> . MENOS
    (45) signo -> . POR
    (46) signo -> . DIVIDIDO
    (47) signo -> . RESIDUO
    (48) signo -> . AND
    (49) signo -> . OR
    (50) signo -> . XOR
    (51) signo -> . BAND
    (52) signo -> . BOR
    (53) signo -> . BXOR
    (54) signo -> . SHIFTI
    (55) signo -> . SHIFTD
    (56) signo -> . IGUALQ
    (57) signo -> . NIGUALQ
    (58) signo -> . MAYORQ
    (59) signo -> . MENORQ
    (60) signo -> . MAYORIGUALQ
    (61) signo -> . MENORIGUALQ
    (65) empty -> .

    MAS             shift and go to state 72
    MENOS           shift and go to state 73
    POR             shift and go to state 74
    DIVIDIDO        shift and go to state 75
    RESIDUO         shift and go to state 76
    AND             shift and go to state 77
    OR              shift and go to state 78
    XOR             shift and go to state 79
    BAND            shift and go to state 80
    BOR             shift and go to state 81
    BXOR            shift and go to state 82
    SHIFTI          shift and go to state 83
    SHIFTD          shift and go to state 84
    IGUALQ          shift and go to state 85
    NIGUALQ         shift and go to state 86
    MAYORQ          shift and go to state 87
    MENORQ          shift and go to state 88
    MAYORIGUALQ     shift and go to state 89
    MENORIGUALQ     shift and go to state 90
    PTCOMA          reduce using rule 65 (empty -> .)
    CORDER          reduce using rule 65 (empty -> .)
    PARDER          reduce using rule 65 (empty -> .)

    exp_numerica2                  shift and go to state 69
    signo                          shift and go to state 70
    empty                          shift and go to state 71

state 44

    (26) exp_numerica -> BNOT . valores
    (38) valores -> . ENTERO
    (39) valores -> . DECIMAL
    (40) valores -> . VAR
    (41) valores -> . VAR indices
    (42) valores -> . CADENA

    ENTERO          shift and go to state 49
    DECIMAL         shift and go to state 50
    VAR             shift and go to state 38
    CADENA          shift and go to state 51

    valores                        shift and go to state 91

state 45

    (27) exp_numerica -> MENOS . valores
    (38) valores -> . ENTERO
    (39) valores -> . DECIMAL
    (40) valores -> . VAR
    (41) valores -> . VAR indices
    (42) valores -> . CADENA

    ENTERO          shift and go to state 49
    DECIMAL         shift and go to state 50
    VAR             shift and go to state 38
    CADENA          shift and go to state 51

    valores                        shift and go to state 92

state 46

    (28) exp_numerica -> NOT . valores
    (38) valores -> . ENTERO
    (39) valores -> . DECIMAL
    (40) valores -> . VAR
    (41) valores -> . VAR indices
    (42) valores -> . CADENA

    ENTERO          shift and go to state 49
    DECIMAL         shift and go to state 50
    VAR             shift and go to state 38
    CADENA          shift and go to state 51

    valores                        shift and go to state 93

state 47

    (29) exp_numerica -> ARRAY . PARIZQ PARDER

    PARIZQ          shift and go to state 94


state 48

    (30) exp_numerica -> ABS . PARIZQ valores PARDER

    PARIZQ          shift and go to state 95


state 49

    (38) valores -> ENTERO .

    MAS             reduce using rule 38 (valores -> ENTERO .)
    MENOS           reduce using rule 38 (valores -> ENTERO .)
    POR             reduce using rule 38 (valores -> ENTERO .)
    DIVIDIDO        reduce using rule 38 (valores -> ENTERO .)
    RESIDUO         reduce using rule 38 (valores -> ENTERO .)
    AND             reduce using rule 38 (valores -> ENTERO .)
    OR              reduce using rule 38 (valores -> ENTERO .)
    XOR             reduce using rule 38 (valores -> ENTERO .)
    BAND            reduce using rule 38 (valores -> ENTERO .)
    BOR             reduce using rule 38 (valores -> ENTERO .)
    BXOR            reduce using rule 38 (valores -> ENTERO .)
    SHIFTI          reduce using rule 38 (valores -> ENTERO .)
    SHIFTD          reduce using rule 38 (valores -> ENTERO .)
    IGUALQ          reduce using rule 38 (valores -> ENTERO .)
    NIGUALQ         reduce using rule 38 (valores -> ENTERO .)
    MAYORQ          reduce using rule 38 (valores -> ENTERO .)
    MENORQ          reduce using rule 38 (valores -> ENTERO .)
    MAYORIGUALQ     reduce using rule 38 (valores -> ENTERO .)
    MENORIGUALQ     reduce using rule 38 (valores -> ENTERO .)
    PTCOMA          reduce using rule 38 (valores -> ENTERO .)
    CORDER          reduce using rule 38 (valores -> ENTERO .)
    PARDER          reduce using rule 38 (valores -> ENTERO .)


state 50

    (39) valores -> DECIMAL .

    MAS             reduce using rule 39 (valores -> DECIMAL .)
    MENOS           reduce using rule 39 (valores -> DECIMAL .)
    POR             reduce using rule 39 (valores -> DECIMAL .)
    DIVIDIDO        reduce using rule 39 (valores -> DECIMAL .)
    RESIDUO         reduce using rule 39 (valores -> DECIMAL .)
    AND             reduce using rule 39 (valores -> DECIMAL .)
    OR              reduce using rule 39 (valores -> DECIMAL .)
    XOR             reduce using rule 39 (valores -> DECIMAL .)
    BAND            reduce using rule 39 (valores -> DECIMAL .)
    BOR             reduce using rule 39 (valores -> DECIMAL .)
    BXOR            reduce using rule 39 (valores -> DECIMAL .)
    SHIFTI          reduce using rule 39 (valores -> DECIMAL .)
    SHIFTD          reduce using rule 39 (valores -> DECIMAL .)
    IGUALQ          reduce using rule 39 (valores -> DECIMAL .)
    NIGUALQ         reduce using rule 39 (valores -> DECIMAL .)
    MAYORQ          reduce using rule 39 (valores -> DECIMAL .)
    MENORQ          reduce using rule 39 (valores -> DECIMAL .)
    MAYORIGUALQ     reduce using rule 39 (valores -> DECIMAL .)
    MENORIGUALQ     reduce using rule 39 (valores -> DECIMAL .)
    PTCOMA          reduce using rule 39 (valores -> DECIMAL .)
    CORDER          reduce using rule 39 (valores -> DECIMAL .)
    PARDER          reduce using rule 39 (valores -> DECIMAL .)


state 51

    (42) valores -> CADENA .

    MAS             reduce using rule 42 (valores -> CADENA .)
    MENOS           reduce using rule 42 (valores -> CADENA .)
    POR             reduce using rule 42 (valores -> CADENA .)
    DIVIDIDO        reduce using rule 42 (valores -> CADENA .)
    RESIDUO         reduce using rule 42 (valores -> CADENA .)
    AND             reduce using rule 42 (valores -> CADENA .)
    OR              reduce using rule 42 (valores -> CADENA .)
    XOR             reduce using rule 42 (valores -> CADENA .)
    BAND            reduce using rule 42 (valores -> CADENA .)
    BOR             reduce using rule 42 (valores -> CADENA .)
    BXOR            reduce using rule 42 (valores -> CADENA .)
    SHIFTI          reduce using rule 42 (valores -> CADENA .)
    SHIFTD          reduce using rule 42 (valores -> CADENA .)
    IGUALQ          reduce using rule 42 (valores -> CADENA .)
    NIGUALQ         reduce using rule 42 (valores -> CADENA .)
    MAYORQ          reduce using rule 42 (valores -> CADENA .)
    MENORQ          reduce using rule 42 (valores -> CADENA .)
    MAYORIGUALQ     reduce using rule 42 (valores -> CADENA .)
    MENORIGUALQ     reduce using rule 42 (valores -> CADENA .)
    PTCOMA          reduce using rule 42 (valores -> CADENA .)
    CORDER          reduce using rule 42 (valores -> CADENA .)
    PARDER          reduce using rule 42 (valores -> CADENA .)


state 52

    (18) array_instr -> VAR indices IGUAL . exp_numerica PTCOMA
    (25) exp_numerica -> . valores exp_numerica2
    (26) exp_numerica -> . BNOT valores
    (27) exp_numerica -> . MENOS valores
    (28) exp_numerica -> . NOT valores
    (29) exp_numerica -> . ARRAY PARIZQ PARDER
    (30) exp_numerica -> . ABS PARIZQ valores PARDER
    (31) exp_numerica -> . PARIZQ tipo_dato PARDER VAR
    (38) valores -> . ENTERO
    (39) valores -> . DECIMAL
    (40) valores -> . VAR
    (41) valores -> . VAR indices
    (42) valores -> . CADENA

    BNOT            shift and go to state 44
    MENOS           shift and go to state 45
    NOT             shift and go to state 46
    ARRAY           shift and go to state 47
    ABS             shift and go to state 48
    PARIZQ          shift and go to state 41
    ENTERO          shift and go to state 49
    DECIMAL         shift and go to state 50
    VAR             shift and go to state 38
    CADENA          shift and go to state 51

    exp_numerica                   shift and go to state 96
    valores                        shift and go to state 43

state 53

    (35) indices2 -> indice . indices2
    (35) indices2 -> . indice indices2
    (36) indices2 -> . empty
    (37) indice -> . CORIZQ exp_numerica CORDER
    (65) empty -> .

    CORIZQ          shift and go to state 30
    IGUAL           reduce using rule 65 (empty -> .)
    MAS             reduce using rule 65 (empty -> .)
    MENOS           reduce using rule 65 (empty -> .)
    POR             reduce using rule 65 (empty -> .)
    DIVIDIDO        reduce using rule 65 (empty -> .)
    RESIDUO         reduce using rule 65 (empty -> .)
    AND             reduce using rule 65 (empty -> .)
    OR              reduce using rule 65 (empty -> .)
    XOR             reduce using rule 65 (empty -> .)
    BAND            reduce using rule 65 (empty -> .)
    BOR             reduce using rule 65 (empty -> .)
    BXOR            reduce using rule 65 (empty -> .)
    SHIFTI          reduce using rule 65 (empty -> .)
    SHIFTD          reduce using rule 65 (empty -> .)
    IGUALQ          reduce using rule 65 (empty -> .)
    NIGUALQ         reduce using rule 65 (empty -> .)
    MAYORQ          reduce using rule 65 (empty -> .)
    MENORQ          reduce using rule 65 (empty -> .)
    MAYORIGUALQ     reduce using rule 65 (empty -> .)
    MENORIGUALQ     reduce using rule 65 (empty -> .)
    PTCOMA          reduce using rule 65 (empty -> .)
    CORDER          reduce using rule 65 (empty -> .)
    PARDER          reduce using rule 65 (empty -> .)

    indice                         shift and go to state 53
    indices2                       shift and go to state 97
    empty                          shift and go to state 55

state 54

    (34) indices -> indice indices2 .

    IGUAL           reduce using rule 34 (indices -> indice indices2 .)
    MAS             reduce using rule 34 (indices -> indice indices2 .)
    MENOS           reduce using rule 34 (indices -> indice indices2 .)
    POR             reduce using rule 34 (indices -> indice indices2 .)
    DIVIDIDO        reduce using rule 34 (indices -> indice indices2 .)
    RESIDUO         reduce using rule 34 (indices -> indice indices2 .)
    AND             reduce using rule 34 (indices -> indice indices2 .)
    OR              reduce using rule 34 (indices -> indice indices2 .)
    XOR             reduce using rule 34 (indices -> indice indices2 .)
    BAND            reduce using rule 34 (indices -> indice indices2 .)
    BOR             reduce using rule 34 (indices -> indice indices2 .)
    BXOR            reduce using rule 34 (indices -> indice indices2 .)
    SHIFTI          reduce using rule 34 (indices -> indice indices2 .)
    SHIFTD          reduce using rule 34 (indices -> indice indices2 .)
    IGUALQ          reduce using rule 34 (indices -> indice indices2 .)
    NIGUALQ         reduce using rule 34 (indices -> indice indices2 .)
    MAYORQ          reduce using rule 34 (indices -> indice indices2 .)
    MENORQ          reduce using rule 34 (indices -> indice indices2 .)
    MAYORIGUALQ     reduce using rule 34 (indices -> indice indices2 .)
    MENORIGUALQ     reduce using rule 34 (indices -> indice indices2 .)
    PTCOMA          reduce using rule 34 (indices -> indice indices2 .)
    CORDER          reduce using rule 34 (indices -> indice indices2 .)
    PARDER          reduce using rule 34 (indices -> indice indices2 .)


state 55

    (36) indices2 -> empty .

    IGUAL           reduce using rule 36 (indices2 -> empty .)
    MAS             reduce using rule 36 (indices2 -> empty .)
    MENOS           reduce using rule 36 (indices2 -> empty .)
    POR             reduce using rule 36 (indices2 -> empty .)
    DIVIDIDO        reduce using rule 36 (indices2 -> empty .)
    RESIDUO         reduce using rule 36 (indices2 -> empty .)
    AND             reduce using rule 36 (indices2 -> empty .)
    OR              reduce using rule 36 (indices2 -> empty .)
    XOR             reduce using rule 36 (indices2 -> empty .)
    BAND            reduce using rule 36 (indices2 -> empty .)
    BOR             reduce using rule 36 (indices2 -> empty .)
    BXOR            reduce using rule 36 (indices2 -> empty .)
    SHIFTI          reduce using rule 36 (indices2 -> empty .)
    SHIFTD          reduce using rule 36 (indices2 -> empty .)
    IGUALQ          reduce using rule 36 (indices2 -> empty .)
    NIGUALQ         reduce using rule 36 (indices2 -> empty .)
    MAYORQ          reduce using rule 36 (indices2 -> empty .)
    MENORQ          reduce using rule 36 (indices2 -> empty .)
    MAYORIGUALQ     reduce using rule 36 (indices2 -> empty .)
    MENORIGUALQ     reduce using rule 36 (indices2 -> empty .)
    PTCOMA          reduce using rule 36 (indices2 -> empty .)
    CORDER          reduce using rule 36 (indices2 -> empty .)
    PARDER          reduce using rule 36 (indices2 -> empty .)


state 56

    (37) indice -> CORIZQ exp_numerica . CORDER

    CORDER          shift and go to state 98


state 57

    (20) unset_instr -> UNSET PARIZQ exp_numerica . PARDER PTCOMA

    PARDER          shift and go to state 99


state 58

    (19) print_instr -> PRINT PARIZQ exp_numerica . PARDER PTCOMA

    PARDER          shift and go to state 100


state 59

    (21) if_instr -> IF PARIZQ exp_numerica . PARDER goto_instr

    PARDER          shift and go to state 101


state 60

    (23) goto_instr -> GOTO ID PTCOMA .

    error           reduce using rule 23 (goto_instr -> GOTO ID PTCOMA .)
    VAR             reduce using rule 23 (goto_instr -> GOTO ID PTCOMA .)
    UNSET           reduce using rule 23 (goto_instr -> GOTO ID PTCOMA .)
    PRINT           reduce using rule 23 (goto_instr -> GOTO ID PTCOMA .)
    IF              reduce using rule 23 (goto_instr -> GOTO ID PTCOMA .)
    ID              reduce using rule 23 (goto_instr -> GOTO ID PTCOMA .)
    GOTO            reduce using rule 23 (goto_instr -> GOTO ID PTCOMA .)
    EXIT            reduce using rule 23 (goto_instr -> GOTO ID PTCOMA .)
    $end            reduce using rule 23 (goto_instr -> GOTO ID PTCOMA .)


state 61

    (41) valores -> VAR indices .

    MAS             reduce using rule 41 (valores -> VAR indices .)
    MENOS           reduce using rule 41 (valores -> VAR indices .)
    POR             reduce using rule 41 (valores -> VAR indices .)
    DIVIDIDO        reduce using rule 41 (valores -> VAR indices .)
    RESIDUO         reduce using rule 41 (valores -> VAR indices .)
    AND             reduce using rule 41 (valores -> VAR indices .)
    OR              reduce using rule 41 (valores -> VAR indices .)
    XOR             reduce using rule 41 (valores -> VAR indices .)
    BAND            reduce using rule 41 (valores -> VAR indices .)
    BOR             reduce using rule 41 (valores -> VAR indices .)
    BXOR            reduce using rule 41 (valores -> VAR indices .)
    SHIFTI          reduce using rule 41 (valores -> VAR indices .)
    SHIFTD          reduce using rule 41 (valores -> VAR indices .)
    IGUALQ          reduce using rule 41 (valores -> VAR indices .)
    NIGUALQ         reduce using rule 41 (valores -> VAR indices .)
    MAYORQ          reduce using rule 41 (valores -> VAR indices .)
    MENORQ          reduce using rule 41 (valores -> VAR indices .)
    MAYORIGUALQ     reduce using rule 41 (valores -> VAR indices .)
    MENORIGUALQ     reduce using rule 41 (valores -> VAR indices .)
    PTCOMA          reduce using rule 41 (valores -> VAR indices .)
    CORDER          reduce using rule 41 (valores -> VAR indices .)
    PARDER          reduce using rule 41 (valores -> VAR indices .)


state 62

    (15) asignacion -> VAR IGUAL exp_numerica PTCOMA .

    error           reduce using rule 15 (asignacion -> VAR IGUAL exp_numerica PTCOMA .)
    VAR             reduce using rule 15 (asignacion -> VAR IGUAL exp_numerica PTCOMA .)
    UNSET           reduce using rule 15 (asignacion -> VAR IGUAL exp_numerica PTCOMA .)
    PRINT           reduce using rule 15 (asignacion -> VAR IGUAL exp_numerica PTCOMA .)
    IF              reduce using rule 15 (asignacion -> VAR IGUAL exp_numerica PTCOMA .)
    ID              reduce using rule 15 (asignacion -> VAR IGUAL exp_numerica PTCOMA .)
    GOTO            reduce using rule 15 (asignacion -> VAR IGUAL exp_numerica PTCOMA .)
    EXIT            reduce using rule 15 (asignacion -> VAR IGUAL exp_numerica PTCOMA .)
    $end            reduce using rule 15 (asignacion -> VAR IGUAL exp_numerica PTCOMA .)


state 63

    (16) asignacion -> VAR IGUAL READ PARIZQ . PARDER PTCOMA

    PARDER          shift and go to state 102


state 64

    (31) exp_numerica -> PARIZQ tipo_dato . PARDER VAR

    PARDER          shift and go to state 103


state 65

    (62) tipo_dato -> INT .

    PARDER          reduce using rule 62 (tipo_dato -> INT .)


state 66

    (63) tipo_dato -> FLOAT .

    PARDER          reduce using rule 63 (tipo_dato -> FLOAT .)


state 67

    (64) tipo_dato -> CHAR .

    PARDER          reduce using rule 64 (tipo_dato -> CHAR .)


state 68

    (17) asignacion -> VAR IGUAL BAND VAR . PTCOMA

    PTCOMA          shift and go to state 104


state 69

    (25) exp_numerica -> valores exp_numerica2 .

    PTCOMA          reduce using rule 25 (exp_numerica -> valores exp_numerica2 .)
    CORDER          reduce using rule 25 (exp_numerica -> valores exp_numerica2 .)
    PARDER          reduce using rule 25 (exp_numerica -> valores exp_numerica2 .)


state 70

    (32) exp_numerica2 -> signo . valores
    (38) valores -> . ENTERO
    (39) valores -> . DECIMAL
    (40) valores -> . VAR
    (41) valores -> . VAR indices
    (42) valores -> . CADENA

    ENTERO          shift and go to state 49
    DECIMAL         shift and go to state 50
    VAR             shift and go to state 38
    CADENA          shift and go to state 51

    valores                        shift and go to state 105

state 71

    (33) exp_numerica2 -> empty .

    PTCOMA          reduce using rule 33 (exp_numerica2 -> empty .)
    CORDER          reduce using rule 33 (exp_numerica2 -> empty .)
    PARDER          reduce using rule 33 (exp_numerica2 -> empty .)


state 72

    (43) signo -> MAS .

    ENTERO          reduce using rule 43 (signo -> MAS .)
    DECIMAL         reduce using rule 43 (signo -> MAS .)
    VAR             reduce using rule 43 (signo -> MAS .)
    CADENA          reduce using rule 43 (signo -> MAS .)


state 73

    (44) signo -> MENOS .

    ENTERO          reduce using rule 44 (signo -> MENOS .)
    DECIMAL         reduce using rule 44 (signo -> MENOS .)
    VAR             reduce using rule 44 (signo -> MENOS .)
    CADENA          reduce using rule 44 (signo -> MENOS .)


state 74

    (45) signo -> POR .

    ENTERO          reduce using rule 45 (signo -> POR .)
    DECIMAL         reduce using rule 45 (signo -> POR .)
    VAR             reduce using rule 45 (signo -> POR .)
    CADENA          reduce using rule 45 (signo -> POR .)


state 75

    (46) signo -> DIVIDIDO .

    ENTERO          reduce using rule 46 (signo -> DIVIDIDO .)
    DECIMAL         reduce using rule 46 (signo -> DIVIDIDO .)
    VAR             reduce using rule 46 (signo -> DIVIDIDO .)
    CADENA          reduce using rule 46 (signo -> DIVIDIDO .)


state 76

    (47) signo -> RESIDUO .

    ENTERO          reduce using rule 47 (signo -> RESIDUO .)
    DECIMAL         reduce using rule 47 (signo -> RESIDUO .)
    VAR             reduce using rule 47 (signo -> RESIDUO .)
    CADENA          reduce using rule 47 (signo -> RESIDUO .)


state 77

    (48) signo -> AND .

    ENTERO          reduce using rule 48 (signo -> AND .)
    DECIMAL         reduce using rule 48 (signo -> AND .)
    VAR             reduce using rule 48 (signo -> AND .)
    CADENA          reduce using rule 48 (signo -> AND .)


state 78

    (49) signo -> OR .

    ENTERO          reduce using rule 49 (signo -> OR .)
    DECIMAL         reduce using rule 49 (signo -> OR .)
    VAR             reduce using rule 49 (signo -> OR .)
    CADENA          reduce using rule 49 (signo -> OR .)


state 79

    (50) signo -> XOR .

    ENTERO          reduce using rule 50 (signo -> XOR .)
    DECIMAL         reduce using rule 50 (signo -> XOR .)
    VAR             reduce using rule 50 (signo -> XOR .)
    CADENA          reduce using rule 50 (signo -> XOR .)


state 80

    (51) signo -> BAND .

    ENTERO          reduce using rule 51 (signo -> BAND .)
    DECIMAL         reduce using rule 51 (signo -> BAND .)
    VAR             reduce using rule 51 (signo -> BAND .)
    CADENA          reduce using rule 51 (signo -> BAND .)


state 81

    (52) signo -> BOR .

    ENTERO          reduce using rule 52 (signo -> BOR .)
    DECIMAL         reduce using rule 52 (signo -> BOR .)
    VAR             reduce using rule 52 (signo -> BOR .)
    CADENA          reduce using rule 52 (signo -> BOR .)


state 82

    (53) signo -> BXOR .

    ENTERO          reduce using rule 53 (signo -> BXOR .)
    DECIMAL         reduce using rule 53 (signo -> BXOR .)
    VAR             reduce using rule 53 (signo -> BXOR .)
    CADENA          reduce using rule 53 (signo -> BXOR .)


state 83

    (54) signo -> SHIFTI .

    ENTERO          reduce using rule 54 (signo -> SHIFTI .)
    DECIMAL         reduce using rule 54 (signo -> SHIFTI .)
    VAR             reduce using rule 54 (signo -> SHIFTI .)
    CADENA          reduce using rule 54 (signo -> SHIFTI .)


state 84

    (55) signo -> SHIFTD .

    ENTERO          reduce using rule 55 (signo -> SHIFTD .)
    DECIMAL         reduce using rule 55 (signo -> SHIFTD .)
    VAR             reduce using rule 55 (signo -> SHIFTD .)
    CADENA          reduce using rule 55 (signo -> SHIFTD .)


state 85

    (56) signo -> IGUALQ .

    ENTERO          reduce using rule 56 (signo -> IGUALQ .)
    DECIMAL         reduce using rule 56 (signo -> IGUALQ .)
    VAR             reduce using rule 56 (signo -> IGUALQ .)
    CADENA          reduce using rule 56 (signo -> IGUALQ .)


state 86

    (57) signo -> NIGUALQ .

    ENTERO          reduce using rule 57 (signo -> NIGUALQ .)
    DECIMAL         reduce using rule 57 (signo -> NIGUALQ .)
    VAR             reduce using rule 57 (signo -> NIGUALQ .)
    CADENA          reduce using rule 57 (signo -> NIGUALQ .)


state 87

    (58) signo -> MAYORQ .

    ENTERO          reduce using rule 58 (signo -> MAYORQ .)
    DECIMAL         reduce using rule 58 (signo -> MAYORQ .)
    VAR             reduce using rule 58 (signo -> MAYORQ .)
    CADENA          reduce using rule 58 (signo -> MAYORQ .)


state 88

    (59) signo -> MENORQ .

    ENTERO          reduce using rule 59 (signo -> MENORQ .)
    DECIMAL         reduce using rule 59 (signo -> MENORQ .)
    VAR             reduce using rule 59 (signo -> MENORQ .)
    CADENA          reduce using rule 59 (signo -> MENORQ .)


state 89

    (60) signo -> MAYORIGUALQ .

    ENTERO          reduce using rule 60 (signo -> MAYORIGUALQ .)
    DECIMAL         reduce using rule 60 (signo -> MAYORIGUALQ .)
    VAR             reduce using rule 60 (signo -> MAYORIGUALQ .)
    CADENA          reduce using rule 60 (signo -> MAYORIGUALQ .)


state 90

    (61) signo -> MENORIGUALQ .

    ENTERO          reduce using rule 61 (signo -> MENORIGUALQ .)
    DECIMAL         reduce using rule 61 (signo -> MENORIGUALQ .)
    VAR             reduce using rule 61 (signo -> MENORIGUALQ .)
    CADENA          reduce using rule 61 (signo -> MENORIGUALQ .)


state 91

    (26) exp_numerica -> BNOT valores .

    PTCOMA          reduce using rule 26 (exp_numerica -> BNOT valores .)
    CORDER          reduce using rule 26 (exp_numerica -> BNOT valores .)
    PARDER          reduce using rule 26 (exp_numerica -> BNOT valores .)


state 92

    (27) exp_numerica -> MENOS valores .

    PTCOMA          reduce using rule 27 (exp_numerica -> MENOS valores .)
    CORDER          reduce using rule 27 (exp_numerica -> MENOS valores .)
    PARDER          reduce using rule 27 (exp_numerica -> MENOS valores .)


state 93

    (28) exp_numerica -> NOT valores .

    PTCOMA          reduce using rule 28 (exp_numerica -> NOT valores .)
    CORDER          reduce using rule 28 (exp_numerica -> NOT valores .)
    PARDER          reduce using rule 28 (exp_numerica -> NOT valores .)


state 94

    (29) exp_numerica -> ARRAY PARIZQ . PARDER

    PARDER          shift and go to state 106


state 95

    (30) exp_numerica -> ABS PARIZQ . valores PARDER
    (38) valores -> . ENTERO
    (39) valores -> . DECIMAL
    (40) valores -> . VAR
    (41) valores -> . VAR indices
    (42) valores -> . CADENA

    ENTERO          shift and go to state 49
    DECIMAL         shift and go to state 50
    VAR             shift and go to state 38
    CADENA          shift and go to state 51

    valores                        shift and go to state 107

state 96

    (18) array_instr -> VAR indices IGUAL exp_numerica . PTCOMA

    PTCOMA          shift and go to state 108


state 97

    (35) indices2 -> indice indices2 .

    IGUAL           reduce using rule 35 (indices2 -> indice indices2 .)
    MAS             reduce using rule 35 (indices2 -> indice indices2 .)
    MENOS           reduce using rule 35 (indices2 -> indice indices2 .)
    POR             reduce using rule 35 (indices2 -> indice indices2 .)
    DIVIDIDO        reduce using rule 35 (indices2 -> indice indices2 .)
    RESIDUO         reduce using rule 35 (indices2 -> indice indices2 .)
    AND             reduce using rule 35 (indices2 -> indice indices2 .)
    OR              reduce using rule 35 (indices2 -> indice indices2 .)
    XOR             reduce using rule 35 (indices2 -> indice indices2 .)
    BAND            reduce using rule 35 (indices2 -> indice indices2 .)
    BOR             reduce using rule 35 (indices2 -> indice indices2 .)
    BXOR            reduce using rule 35 (indices2 -> indice indices2 .)
    SHIFTI          reduce using rule 35 (indices2 -> indice indices2 .)
    SHIFTD          reduce using rule 35 (indices2 -> indice indices2 .)
    IGUALQ          reduce using rule 35 (indices2 -> indice indices2 .)
    NIGUALQ         reduce using rule 35 (indices2 -> indice indices2 .)
    MAYORQ          reduce using rule 35 (indices2 -> indice indices2 .)
    MENORQ          reduce using rule 35 (indices2 -> indice indices2 .)
    MAYORIGUALQ     reduce using rule 35 (indices2 -> indice indices2 .)
    MENORIGUALQ     reduce using rule 35 (indices2 -> indice indices2 .)
    PTCOMA          reduce using rule 35 (indices2 -> indice indices2 .)
    CORDER          reduce using rule 35 (indices2 -> indice indices2 .)
    PARDER          reduce using rule 35 (indices2 -> indice indices2 .)


state 98

    (37) indice -> CORIZQ exp_numerica CORDER .

    CORIZQ          reduce using rule 37 (indice -> CORIZQ exp_numerica CORDER .)
    IGUAL           reduce using rule 37 (indice -> CORIZQ exp_numerica CORDER .)
    MAS             reduce using rule 37 (indice -> CORIZQ exp_numerica CORDER .)
    MENOS           reduce using rule 37 (indice -> CORIZQ exp_numerica CORDER .)
    POR             reduce using rule 37 (indice -> CORIZQ exp_numerica CORDER .)
    DIVIDIDO        reduce using rule 37 (indice -> CORIZQ exp_numerica CORDER .)
    RESIDUO         reduce using rule 37 (indice -> CORIZQ exp_numerica CORDER .)
    AND             reduce using rule 37 (indice -> CORIZQ exp_numerica CORDER .)
    OR              reduce using rule 37 (indice -> CORIZQ exp_numerica CORDER .)
    XOR             reduce using rule 37 (indice -> CORIZQ exp_numerica CORDER .)
    BAND            reduce using rule 37 (indice -> CORIZQ exp_numerica CORDER .)
    BOR             reduce using rule 37 (indice -> CORIZQ exp_numerica CORDER .)
    BXOR            reduce using rule 37 (indice -> CORIZQ exp_numerica CORDER .)
    SHIFTI          reduce using rule 37 (indice -> CORIZQ exp_numerica CORDER .)
    SHIFTD          reduce using rule 37 (indice -> CORIZQ exp_numerica CORDER .)
    IGUALQ          reduce using rule 37 (indice -> CORIZQ exp_numerica CORDER .)
    NIGUALQ         reduce using rule 37 (indice -> CORIZQ exp_numerica CORDER .)
    MAYORQ          reduce using rule 37 (indice -> CORIZQ exp_numerica CORDER .)
    MENORQ          reduce using rule 37 (indice -> CORIZQ exp_numerica CORDER .)
    MAYORIGUALQ     reduce using rule 37 (indice -> CORIZQ exp_numerica CORDER .)
    MENORIGUALQ     reduce using rule 37 (indice -> CORIZQ exp_numerica CORDER .)
    PTCOMA          reduce using rule 37 (indice -> CORIZQ exp_numerica CORDER .)
    CORDER          reduce using rule 37 (indice -> CORIZQ exp_numerica CORDER .)
    PARDER          reduce using rule 37 (indice -> CORIZQ exp_numerica CORDER .)


state 99

    (20) unset_instr -> UNSET PARIZQ exp_numerica PARDER . PTCOMA

    PTCOMA          shift and go to state 109


state 100

    (19) print_instr -> PRINT PARIZQ exp_numerica PARDER . PTCOMA

    PTCOMA          shift and go to state 110


state 101

    (21) if_instr -> IF PARIZQ exp_numerica PARDER . goto_instr
    (23) goto_instr -> . GOTO ID PTCOMA

    GOTO            shift and go to state 20

    goto_instr                     shift and go to state 111

state 102

    (16) asignacion -> VAR IGUAL READ PARIZQ PARDER . PTCOMA

    PTCOMA          shift and go to state 112


state 103

    (31) exp_numerica -> PARIZQ tipo_dato PARDER . VAR

    VAR             shift and go to state 113


state 104

    (17) asignacion -> VAR IGUAL BAND VAR PTCOMA .

    error           reduce using rule 17 (asignacion -> VAR IGUAL BAND VAR PTCOMA .)
    VAR             reduce using rule 17 (asignacion -> VAR IGUAL BAND VAR PTCOMA .)
    UNSET           reduce using rule 17 (asignacion -> VAR IGUAL BAND VAR PTCOMA .)
    PRINT           reduce using rule 17 (asignacion -> VAR IGUAL BAND VAR PTCOMA .)
    IF              reduce using rule 17 (asignacion -> VAR IGUAL BAND VAR PTCOMA .)
    ID              reduce using rule 17 (asignacion -> VAR IGUAL BAND VAR PTCOMA .)
    GOTO            reduce using rule 17 (asignacion -> VAR IGUAL BAND VAR PTCOMA .)
    EXIT            reduce using rule 17 (asignacion -> VAR IGUAL BAND VAR PTCOMA .)
    $end            reduce using rule 17 (asignacion -> VAR IGUAL BAND VAR PTCOMA .)


state 105

    (32) exp_numerica2 -> signo valores .

    PTCOMA          reduce using rule 32 (exp_numerica2 -> signo valores .)
    CORDER          reduce using rule 32 (exp_numerica2 -> signo valores .)
    PARDER          reduce using rule 32 (exp_numerica2 -> signo valores .)


state 106

    (29) exp_numerica -> ARRAY PARIZQ PARDER .

    PTCOMA          reduce using rule 29 (exp_numerica -> ARRAY PARIZQ PARDER .)
    CORDER          reduce using rule 29 (exp_numerica -> ARRAY PARIZQ PARDER .)
    PARDER          reduce using rule 29 (exp_numerica -> ARRAY PARIZQ PARDER .)


state 107

    (30) exp_numerica -> ABS PARIZQ valores . PARDER

    PARDER          shift and go to state 114


state 108

    (18) array_instr -> VAR indices IGUAL exp_numerica PTCOMA .

    error           reduce using rule 18 (array_instr -> VAR indices IGUAL exp_numerica PTCOMA .)
    VAR             reduce using rule 18 (array_instr -> VAR indices IGUAL exp_numerica PTCOMA .)
    UNSET           reduce using rule 18 (array_instr -> VAR indices IGUAL exp_numerica PTCOMA .)
    PRINT           reduce using rule 18 (array_instr -> VAR indices IGUAL exp_numerica PTCOMA .)
    IF              reduce using rule 18 (array_instr -> VAR indices IGUAL exp_numerica PTCOMA .)
    ID              reduce using rule 18 (array_instr -> VAR indices IGUAL exp_numerica PTCOMA .)
    GOTO            reduce using rule 18 (array_instr -> VAR indices IGUAL exp_numerica PTCOMA .)
    EXIT            reduce using rule 18 (array_instr -> VAR indices IGUAL exp_numerica PTCOMA .)
    $end            reduce using rule 18 (array_instr -> VAR indices IGUAL exp_numerica PTCOMA .)


state 109

    (20) unset_instr -> UNSET PARIZQ exp_numerica PARDER PTCOMA .

    error           reduce using rule 20 (unset_instr -> UNSET PARIZQ exp_numerica PARDER PTCOMA .)
    VAR             reduce using rule 20 (unset_instr -> UNSET PARIZQ exp_numerica PARDER PTCOMA .)
    UNSET           reduce using rule 20 (unset_instr -> UNSET PARIZQ exp_numerica PARDER PTCOMA .)
    PRINT           reduce using rule 20 (unset_instr -> UNSET PARIZQ exp_numerica PARDER PTCOMA .)
    IF              reduce using rule 20 (unset_instr -> UNSET PARIZQ exp_numerica PARDER PTCOMA .)
    ID              reduce using rule 20 (unset_instr -> UNSET PARIZQ exp_numerica PARDER PTCOMA .)
    GOTO            reduce using rule 20 (unset_instr -> UNSET PARIZQ exp_numerica PARDER PTCOMA .)
    EXIT            reduce using rule 20 (unset_instr -> UNSET PARIZQ exp_numerica PARDER PTCOMA .)
    $end            reduce using rule 20 (unset_instr -> UNSET PARIZQ exp_numerica PARDER PTCOMA .)


state 110

    (19) print_instr -> PRINT PARIZQ exp_numerica PARDER PTCOMA .

    error           reduce using rule 19 (print_instr -> PRINT PARIZQ exp_numerica PARDER PTCOMA .)
    VAR             reduce using rule 19 (print_instr -> PRINT PARIZQ exp_numerica PARDER PTCOMA .)
    UNSET           reduce using rule 19 (print_instr -> PRINT PARIZQ exp_numerica PARDER PTCOMA .)
    PRINT           reduce using rule 19 (print_instr -> PRINT PARIZQ exp_numerica PARDER PTCOMA .)
    IF              reduce using rule 19 (print_instr -> PRINT PARIZQ exp_numerica PARDER PTCOMA .)
    ID              reduce using rule 19 (print_instr -> PRINT PARIZQ exp_numerica PARDER PTCOMA .)
    GOTO            reduce using rule 19 (print_instr -> PRINT PARIZQ exp_numerica PARDER PTCOMA .)
    EXIT            reduce using rule 19 (print_instr -> PRINT PARIZQ exp_numerica PARDER PTCOMA .)
    $end            reduce using rule 19 (print_instr -> PRINT PARIZQ exp_numerica PARDER PTCOMA .)


state 111

    (21) if_instr -> IF PARIZQ exp_numerica PARDER goto_instr .

    error           reduce using rule 21 (if_instr -> IF PARIZQ exp_numerica PARDER goto_instr .)
    VAR             reduce using rule 21 (if_instr -> IF PARIZQ exp_numerica PARDER goto_instr .)
    UNSET           reduce using rule 21 (if_instr -> IF PARIZQ exp_numerica PARDER goto_instr .)
    PRINT           reduce using rule 21 (if_instr -> IF PARIZQ exp_numerica PARDER goto_instr .)
    IF              reduce using rule 21 (if_instr -> IF PARIZQ exp_numerica PARDER goto_instr .)
    ID              reduce using rule 21 (if_instr -> IF PARIZQ exp_numerica PARDER goto_instr .)
    GOTO            reduce using rule 21 (if_instr -> IF PARIZQ exp_numerica PARDER goto_instr .)
    EXIT            reduce using rule 21 (if_instr -> IF PARIZQ exp_numerica PARDER goto_instr .)
    $end            reduce using rule 21 (if_instr -> IF PARIZQ exp_numerica PARDER goto_instr .)


state 112

    (16) asignacion -> VAR IGUAL READ PARIZQ PARDER PTCOMA .

    error           reduce using rule 16 (asignacion -> VAR IGUAL READ PARIZQ PARDER PTCOMA .)
    VAR             reduce using rule 16 (asignacion -> VAR IGUAL READ PARIZQ PARDER PTCOMA .)
    UNSET           reduce using rule 16 (asignacion -> VAR IGUAL READ PARIZQ PARDER PTCOMA .)
    PRINT           reduce using rule 16 (asignacion -> VAR IGUAL READ PARIZQ PARDER PTCOMA .)
    IF              reduce using rule 16 (asignacion -> VAR IGUAL READ PARIZQ PARDER PTCOMA .)
    ID              reduce using rule 16 (asignacion -> VAR IGUAL READ PARIZQ PARDER PTCOMA .)
    GOTO            reduce using rule 16 (asignacion -> VAR IGUAL READ PARIZQ PARDER PTCOMA .)
    EXIT            reduce using rule 16 (asignacion -> VAR IGUAL READ PARIZQ PARDER PTCOMA .)
    $end            reduce using rule 16 (asignacion -> VAR IGUAL READ PARIZQ PARDER PTCOMA .)


state 113

    (31) exp_numerica -> PARIZQ tipo_dato PARDER VAR .

    PTCOMA          reduce using rule 31 (exp_numerica -> PARIZQ tipo_dato PARDER VAR .)
    CORDER          reduce using rule 31 (exp_numerica -> PARIZQ tipo_dato PARDER VAR .)
    PARDER          reduce using rule 31 (exp_numerica -> PARIZQ tipo_dato PARDER VAR .)


state 114

    (30) exp_numerica -> ABS PARIZQ valores PARDER .

    PTCOMA          reduce using rule 30 (exp_numerica -> ABS PARIZQ valores PARDER .)
    CORDER          reduce using rule 30 (exp_numerica -> ABS PARIZQ valores PARDER .)
    PARDER          reduce using rule 30 (exp_numerica -> ABS PARIZQ valores PARDER .)

